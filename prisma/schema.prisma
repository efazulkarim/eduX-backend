generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String?
  role          UserRole
  firstName     String
  lastName      String
  phone         String?
  avatar        String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  staff         Staff?

  @@map("users")
}

model Student {
  id            String       @id @default(cuid())
  rollNumber    String?      @unique
  admissionNo   String?      @unique
  firstName     String
  lastName      String?
  dateOfBirth   DateTime?
  gender        Gender?
  address       String?
  fatherName    String?
  motherName    String?
  parentPhone   String?
  parentEmail   String?
  bloodGroup    String?
  medium        Medium?
  academicYear  String?
  shift         Shift?
  admissionDate DateTime     @default(now())
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sectionId     String?
  attendances   Attendance[]
  examResults   ExamResult[]
  feeInvoices   FeeInvoice[]
  section       Section?     @relation(fields: [sectionId], references: [id])

  @@map("students")
}

model Staff {
  id               String            @id @default(cuid())
  userId           String            @unique
  employeeId       String            @unique
  role             StaffRole         @default(OTHER)
  idNo             String?
  hfId             String?
  dateOfBirth      DateTime?
  joiningDate      DateTime          @default(now())
  bloodGroup       String?
  gender           Gender?
  religion         String?
  medium           Medium?
  department       String?
  designation      String?
  shift            Shift?
  nid              String?
  birthCertNo      String?
  email            String?
  serialNo         String?
  presentAddress   String?
  permanentAddress String?
  // Teacher-specific fields
  qualification    String?
  experience       Int?
  salary           Decimal?
  address          String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  educations       StaffEducation[]
  experiences      StaffExperience[]
  // Teacher relationships
  attendances      Attendance[]
  exams            Exam[]
  subjects         Subject[]
  @@map("staff")
}

model StaffEducation {
  id          String   @id @default(cuid())
  staffId     String
  exam        String
  institute   String
  gpa         String?
  grade       String?
  passingYear String?
  board       String?
  duration    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("staff_educations")
}

model StaffExperience {
  id           String    @id @default(cuid())
  staffId      String
  designation  String
  organization String
  address      String?
  duration     String?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  staff        Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("staff_experiences")
}

model Class {
  id               String            @id @default(cuid())
  name             String            @unique
  medium           Medium            @default(BANGLA)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  attendances      Attendance[]
  exams            Exam[]
  sections         Section[]
  subjects         Subject[]
  classDepartments ClassDepartment[]

  @@map("classes")
}

model Department {
  id               String            @id @default(cuid())
  name             String
  description      String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  sections         Section[]
  subjects         Subject[]
  classDepartments ClassDepartment[]

  @@map("departments")
}

model ClassDepartment {
  id           String     @id @default(cuid())
  classId      String
  departmentId String
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  class        Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([classId, departmentId])
  @@map("class_departments")
}

model Section {
  id           String       @id @default(cuid())
  name         String
  classId      String
  departmentId String?
  capacity     Int          @default(30)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attendances  Attendance[]
  exams        Exam[]
  class        Class        @relation(fields: [classId], references: [id])
  department   Department?  @relation(fields: [departmentId], references: [id])
  students     Student[]
  subjects     Subject[]

  @@unique([classId, departmentId, name])
  @@map("sections")
}

model Subject {
  id           String       @id @default(cuid())
  name         String
  code         String       @unique
  description  String?
  credits      Int          @default(1)
  classId      String?
  departmentId String?
  sectionId    String?
  staffId      String?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attendances  Attendance[]
  exams        Exam[]
  class        Class?       @relation(fields: [classId], references: [id])
  department   Department?  @relation(fields: [departmentId], references: [id])
  section      Section?     @relation(fields: [sectionId], references: [id])
  staff        Staff?       @relation(fields: [staffId], references: [id])

  @@map("subjects")
}

model Attendance {
  id        String           @id @default(cuid())
  studentId String
  classId   String
  sectionId String?
  subjectId String?
  staffId   String
  date      DateTime
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  class     Class            @relation(fields: [classId], references: [id])
  section   Section?         @relation(fields: [sectionId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])
  subject   Subject?         @relation(fields: [subjectId], references: [id])
  staff     Staff            @relation(fields: [staffId], references: [id])

  @@unique([studentId, classId, date])
  @@map("attendances")
}

model Exam {
  id          String       @id @default(cuid())
  title       String
  customName  String?
  type        ExamType
  description String?
  date        DateTime
  startDate   DateTime?
  endDate     DateTime?
  duration    Int
  totalMarks  Int
  passMarks   Int
  sequence    Int          @default(1)
  classId     String
  sectionId   String?
  subjectId   String
  staffId     String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  results     ExamResult[]
  class       Class        @relation(fields: [classId], references: [id])
  section     Section?     @relation(fields: [sectionId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  staff       Staff        @relation(fields: [staffId], references: [id])

  @@map("exams")
}

model ExamResult {
  id            String   @id @default(cuid())
  examId        String
  studentId     String
  marksObtained Int
  grade         String?
  remarks       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  exam          Exam     @relation(fields: [examId], references: [id])
  student       Student  @relation(fields: [studentId], references: [id])

  @@unique([examId, studentId])
  @@map("exam_results")
}

model FeeType {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  amount      Decimal
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  invoices    FeeInvoice[]

  @@map("fee_types")
}

model FeeInvoice {
  id          String    @id @default(cuid())
  studentId   String
  feeTypeId   String
  amount      Decimal
  dueDate     DateTime
  status      FeeStatus @default(PENDING)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  feeType     FeeType   @relation(fields: [feeTypeId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
  payments    Payment[]

  @@map("fee_invoices")
}

model Payment {
  id          String     @id @default(cuid())
  invoiceId   String
  amount      Decimal
  paymentDate DateTime   @default(now())
  method      String
  reference   String?
  remarks     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  invoice     FeeInvoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum UserRole {
  ADMIN
  TEACHER
  ACCOUNTANT
  EMPLOYEE
  EXAM_CONTROLLER
  LIBRARIAN
  SECURITY
  CLEANER
  DRIVER
}

enum StaffRole {
  TEACHER
  ADMIN_STAFF
  ACCOUNTANT
  EXAM_CONTROLLER
  LIBRARIAN
  SECURITY
  CLEANER
  DRIVER
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ExamType {
  MIDTERM
  FINAL
  QUIZ
  ASSIGNMENT
  PROJECT
}

enum Medium {
  BANGLA
  ENGLISH
}

enum Shift {
  MORNING
  DAY
  EVENING
}
